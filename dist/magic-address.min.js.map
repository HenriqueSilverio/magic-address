{"version":3,"file":"magic-address.min.js","sources":["../src/magic-address.js"],"sourcesContent":["/**\n * Defines module object.\n */\nconst MagicAddress = {\n\n  /**\n   * Set some default settings.\n   */\n  DEFAULTS: {\n    'API' : 'https://api.postmon.com.br/v1/cep',\n    'selectors' : {\n      'inputCEP'          : '.js-input-cep',\n      'inputAddress'      : '.js-input-address',\n      'inputNumber'       : '.js-input-number',\n      'inputNeighborhood' : '.js-input-neighborhood',\n      'inputCity'         : '.js-input-city',\n      'inputState'        : '.js-input-state'\n    },\n  },\n\n  /**\n   * Starts the module.\n   * @param object options Custom user options\n   */\n  start(options = {}) {\n    this.settings = Object.assign({}, this.DEFAULTS, options);\n\n    this._setupElements()\n        ._bindEvents();\n\n    return this;\n  },\n\n  /**\n   * Store references to DOM elements.\n   * @return object this Reference to module object, to allow chaining methods.\n   */\n  _setupElements() {\n    let element     = null;\n    const selectors = this.settings.selectors;\n\n    this.elements = {};\n\n    for(element in selectors) {\n      if(selectors.hasOwnProperty(element)) {\n        this.elements[element] = document.querySelector(selectors[element]);\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Bind events to DOM elements.\n   * @return object this Reference to module object, to allow chaining methods.\n   */\n  _bindEvents() {\n    const inputCEP = this.elements.inputCEP;\n\n    inputCEP.addEventListener('blur', this.getAddress.bind(this));\n\n    return this;\n  },\n\n  /**\n   * Query API to get address data.\n   * @return object Promise A Promise object which resolves with the Ajax call.\n   */\n  _queryAPI(cep) {\n    return new Promise((resolve, reject) => {\n      const request = new XMLHttpRequest();\n\n      request.open('GET', `${this.settings.API}/${cep}`);\n\n      request.addEventListener('load', () => {\n        if(4 === request.readyState && 200 === request.status) {\n          resolve(JSON.parse(request.response));\n        } else {\n          reject(Error(request.statusText));\n        }\n      });\n\n      request.addEventListener('error', () => {\n        reject(Error('Unknown Network Error'));\n      });\n\n      request.send();\n    });\n  },\n\n  /**\n   * Get CEP from input, sanitize it, and pass to `_queryAPI` method.\n   * @return object this Reference to module object, to allow chaining methods.\n   */\n  getAddress(event) {\n    const format = /^[0-9]{8}$/;\n    const cep    = event.target.value.replace(/\\D/g, '');\n\n    if(cep && format.test(cep)) {\n      this._queryAPI(cep)\n          .then(this.fillForm.bind(this))\n          .catch(this.clearForm.bind(this));\n\n      return this;\n    }\n\n    this.clearForm();\n  },\n\n  /**\n   * Fills form fields with address data.\n   * @param object data The server response, with address details.\n   * @return object this Reference to module object, to allow chaining methods.\n   */\n  fillForm(data) {\n    const elements = this.elements;\n\n    elements.inputAddress.value      = data.logradouro || '';\n    elements.inputNeighborhood.value = data.bairro || '';\n    elements.inputCity.value         = data.cidade;\n    elements.inputState.value        = data.estado;\n\n    return this;\n  },\n\n  /**\n   * Clear input values.\n   * @return object this Reference to module object, to allow chaining methods.\n   */\n  clearForm() {\n    let element    = null;\n    const elements = this.elements;\n\n    for(element in elements) {\n      if(elements.hasOwnProperty(element)) {\n        elements[element].value = '';\n      }\n    }\n\n    return this;\n  }\n\n};\n\n/**\n * Exports module.\n */\nexport default MagicAddress;\n"],"names":["DEFAULTS","API","selectors","inputCEP","inputAddress","inputNumber","inputNeighborhood","inputCity","inputState","[object Object]","options","this","settings","Object","assign","_setupElements","_bindEvents","element","elements","hasOwnProperty","document","querySelector","addEventListener","getAddress","bind","cep","Promise","resolve","reject","request","XMLHttpRequest","open","readyState","status","JSON","parse","response","Error","statusText","send","event","target","value","replace","test","_queryAPI","then","fillForm","catch","clearForm","data","logradouro","bairro","cidade","estado"],"mappings":";mPAGqB,CAKnBA,SAAU,CACRC,IAAQ,oCACRC,UAAc,CACZC,SAAsB,gBACtBC,aAAsB,oBACtBC,YAAsB,mBACtBC,kBAAsB,yBACtBC,UAAsB,iBACtBC,WAAsB,oBAQ1BC,MAAMC,EAAU,IAMd,OALAC,KAAKC,SAAWC,OAAOC,OAAO,GAAIH,KAAKX,SAAUU,GAEjDC,KAAKI,iBACAC,cAEEL,MAOTF,iBACE,IAAIQ,EAAc,KAClB,MAAMf,EAAYS,KAAKC,SAASV,UAIhC,IAAIe,KAFJN,KAAKO,SAAW,GAEDhB,EACVA,EAAUiB,eAAeF,KAC1BN,KAAKO,SAASD,GAAWG,SAASC,cAAcnB,EAAUe,KAI9D,OAAON,MAOTF,cAKE,OAJiBE,KAAKO,SAASf,SAEtBmB,iBAAiB,OAAQX,KAAKY,WAAWC,KAAKb,OAEhDA,MAOTF,UAAUgB,GACR,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAU,IAAIC,eAEpBD,EAAQE,KAAK,MAAO,GAAGpB,KAAKC,SAASX,OAAOwB,KAE5CI,EAAQP,iBAAiB,QAAQ,KAC5B,IAAMO,EAAQG,YAAc,MAAQH,EAAQI,OAC7CN,EAAQO,KAAKC,MAAMN,EAAQO,WAE3BR,EAAOS,MAAMR,EAAQS,gBAIzBT,EAAQP,iBAAiB,SAAS,KAChCM,EAAOS,MAAM,6BAGfR,EAAQU,WAQZ9B,WAAW+B,GACT,MACMf,EAASe,EAAMC,OAAOC,MAAMC,QAAQ,MAAO,IAEjD,GAAGlB,GAHY,aAGEmB,KAAKnB,GAKpB,OAJAd,KAAKkC,UAAUpB,GACVqB,KAAKnC,KAAKoC,SAASvB,KAAKb,OACxBqC,MAAMrC,KAAKsC,UAAUzB,KAAKb,OAExBA,KAGTA,KAAKsC,aAQPxC,SAASyC,GACP,MAAMhC,EAAWP,KAAKO,SAOtB,OALAA,EAASd,aAAasC,MAAaQ,EAAKC,YAAc,GACtDjC,EAASZ,kBAAkBoC,MAAQQ,EAAKE,QAAU,GAClDlC,EAASX,UAAUmC,MAAgBQ,EAAKG,OACxCnC,EAASV,WAAWkC,MAAeQ,EAAKI,OAEjC3C,MAOTF,YACE,IAAIQ,EAAa,KACjB,MAAMC,EAAWP,KAAKO,SAEtB,IAAID,KAAWC,EACVA,EAASC,eAAeF,KACzBC,EAASD,GAASyB,MAAQ,IAI9B,OAAO/B"}