{"version":3,"sources":["magic-address.js"],"names":["MagicAddress","DEFAULTS","start","options","settings","assign","_setupElements","_bindEvents","element","selectors","elements","hasOwnProperty","document","querySelector","inputCEP","addEventListener","getAddress","bind","_queryAPI","cep","Promise","resolve","reject","request","XMLHttpRequest","open","API","readyState","status","JSON","parse","response","Error","statusText","send","event","format","target","value","replace","test","then","fillForm","catch","clearForm","data","inputAddress","logradouro","inputNeighborhood","bairro","inputCity","cidade","inputState","estado"],"mappings":";AAmJeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAhJf,IAAMA,EAAe,CAKnBC,SAAU,CACA,IAAA,oCACM,UAAA,CACU,SAAA,gBACA,aAAA,oBACA,YAAA,mBACA,kBAAA,yBACA,UAAA,iBACA,WAAA,oBAQ1BC,MAAoB,WAAdC,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAMP,OALFC,KAAAA,SAAWC,OAAO,GAAI,KAAKJ,SAAUE,GAErCG,KAAAA,iBACAC,cAEE,MAOTD,eAAiB,WACXE,IAAAA,EAAc,KACZC,EAAY,KAAKL,SAASK,UAI5BD,IAAAA,KAFCE,KAAAA,SAAW,GAEDD,EACVA,EAAUE,eAAeH,KACrBE,KAAAA,SAASF,GAAWI,SAASC,cAAcJ,EAAUD,KAIvD,OAAA,MAOTD,YAAc,WAKL,OAJU,KAAKG,SAASI,SAEtBC,iBAAiB,OAAQ,KAAKC,WAAWC,KAAK,OAEhD,MAOTC,UAAUC,SAAAA,GAAK,IAAA,EAAA,KACN,OAAA,IAAIC,QAAQ,SAACC,EAASC,GACrBC,IAAAA,EAAU,IAAIC,eAEpBD,EAAQE,KAAK,MAAU,GAAA,OAAA,EAAKrB,SAASsB,IAAOP,KAAAA,OAAAA,IAE5CI,EAAQR,iBAAiB,OAAQ,WAC5B,IAAMQ,EAAQI,YAAc,MAAQJ,EAAQK,OAC7CP,EAAQQ,KAAKC,MAAMP,EAAQQ,WAE3BT,EAAOU,MAAMT,EAAQU,eAIzBV,EAAQR,iBAAiB,QAAS,WAChCO,EAAOU,MAAM,4BAGfT,EAAQW,UAQZlB,WAAWmB,SAAAA,GACHC,IACAjB,EAASgB,EAAME,OAAOC,MAAMC,QAAQ,MAAO,IAE9CpB,GAAAA,GAHY,aAGEqB,KAAKrB,GAKb,OAJFD,KAAAA,UAAUC,GACVsB,KAAK,KAAKC,SAASzB,KAAK,OACxB0B,MAAM,KAAKC,UAAU3B,KAAK,OAExB,KAGJ2B,KAAAA,aAQPF,SAASG,SAAAA,GACDnC,IAAAA,EAAW,KAAKA,SAOf,OALPA,EAASoC,aAAaR,MAAaO,EAAKE,YAAc,GACtDrC,EAASsC,kBAAkBV,MAAQO,EAAKI,QAAU,GAClDvC,EAASwC,UAAUZ,MAAgBO,EAAKM,OACxCzC,EAAS0C,WAAWd,MAAeO,EAAKQ,OAEjC,MAOTT,UAAY,WACNpC,IAAAA,EAAa,KACXE,EAAW,KAAKA,SAElBF,IAAAA,KAAWE,EACVA,EAASC,eAAeH,KACzBE,EAASF,GAAS8B,MAAQ,IAIvB,OAAA,OAQItC,EAAAA,EAAAA,QAAAA,QAAAA","file":"magic-address.min.js","sourceRoot":"../src","sourcesContent":["/**\n * Defines module object.\n */\nconst MagicAddress = {\n\n  /**\n   * Set some default settings.\n   */\n  DEFAULTS: {\n    'API' : 'https://api.postmon.com.br/v1/cep',\n    'selectors' : {\n      'inputCEP'          : '.js-input-cep',\n      'inputAddress'      : '.js-input-address',\n      'inputNumber'       : '.js-input-number',\n      'inputNeighborhood' : '.js-input-neighborhood',\n      'inputCity'         : '.js-input-city',\n      'inputState'        : '.js-input-state'\n    },\n  },\n\n  /**\n   * Starts the module.\n   * @param object options Custom user options\n   */\n  start(options = {}) {\n    this.settings = assign({}, this.DEFAULTS, options);\n\n    this._setupElements()\n        ._bindEvents();\n\n    return this;\n  },\n\n  /**\n   * Store references to DOM elements.\n   * @return object this Reference to module object, to allow chaining methods.\n   */\n  _setupElements() {\n    let element     = null;\n    const selectors = this.settings.selectors;\n\n    this.elements = {};\n\n    for(element in selectors) {\n      if(selectors.hasOwnProperty(element)) {\n        this.elements[element] = document.querySelector(selectors[element]);\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * Bind events to DOM elements.\n   * @return object this Reference to module object, to allow chaining methods.\n   */\n  _bindEvents() {\n    const inputCEP = this.elements.inputCEP;\n\n    inputCEP.addEventListener('blur', this.getAddress.bind(this));\n\n    return this;\n  },\n\n  /**\n   * Query API to get address data.\n   * @return object Promise A Promise object which resolves with the Ajax call.\n   */\n  _queryAPI(cep) {\n    return new Promise((resolve, reject) => {\n      const request = new XMLHttpRequest();\n\n      request.open('GET', `${this.settings.API}/${cep}`);\n\n      request.addEventListener('load', () => {\n        if(4 === request.readyState && 200 === request.status) {\n          resolve(JSON.parse(request.response));\n        } else {\n          reject(Error(request.statusText));\n        }\n      });\n\n      request.addEventListener('error', () => {\n        reject(Error('Unknown Network Error'));\n      });\n\n      request.send();\n    });\n  },\n\n  /**\n   * Get CEP from input, sanitize it, and pass to `_queryAPI` method.\n   * @return object this Reference to module object, to allow chaining methods.\n   */\n  getAddress(event) {\n    const format = /^[0-9]{8}$/;\n    const cep    = event.target.value.replace(/\\D/g, '');\n\n    if(cep && format.test(cep)) {\n      this._queryAPI(cep)\n          .then(this.fillForm.bind(this))\n          .catch(this.clearForm.bind(this));\n\n      return this;\n    }\n\n    this.clearForm();\n  },\n\n  /**\n   * Fills form fields with address data.\n   * @param object data The server response, with address details.\n   * @return object this Reference to module object, to allow chaining methods.\n   */\n  fillForm(data) {\n    const elements = this.elements;\n\n    elements.inputAddress.value      = data.logradouro || '';\n    elements.inputNeighborhood.value = data.bairro || '';\n    elements.inputCity.value         = data.cidade;\n    elements.inputState.value        = data.estado;\n\n    return this;\n  },\n\n  /**\n   * Clear input values.\n   * @return object this Reference to module object, to allow chaining methods.\n   */\n  clearForm() {\n    let element    = null;\n    const elements = this.elements;\n\n    for(element in elements) {\n      if(elements.hasOwnProperty(element)) {\n        elements[element].value = '';\n      }\n    }\n\n    return this;\n  }\n\n};\n\n/**\n * Exports module.\n */\nexport default MagicAddress;\n"]}